---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/337404/reviews?api_key=<DONT_SHARE_MY_TMDB_KEY>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.4.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      X-Memc:
      - HIT
      X-Memc-Key:
      - d2d9f5365e88168fb0469ce674e143f48c7e72dc
      X-Memc-Age:
      - '7632'
      X-Memc-Expires:
      - '7979'
      Date:
      - Fri, 22 Oct 2021 09:22:34 GMT
      Cache-Control:
      - public, max-age=28800
      Etag:
      - W/"c7c049ddd15d2fd16080101e10aea16e"
      Vary:
      - Accept-Encoding
      X-Cache:
      - Hit from cloudfront
      Via:
      - 1.1 dcee1124728af441beff75c95d9d9d74.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - DEN50-C2
      X-Amz-Cf-Id:
      - Li8Uh9bzEMqkNKx_oHLeIQsol3I9B34vjeQnYeHWI5BZuME3buTSfg==
      Age:
      - '3872'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 22 Oct 2021 10:27:06 GMT
recorded_with: VCR 6.0.0
